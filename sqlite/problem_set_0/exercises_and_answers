RULE    ????: PROBLEM
        ???0: NOT UNDERSTAND




CYBERCHASE      https://cs50.harvard.edu/sql/2023/psets/0/cyberchase/
                check50 cs50/problems/2023/sql/cyberchase
                submit50 cs50/problems/2023/sql/cyberchase

CYBERCHASE      1. write a SQL query to list the titles of all episodes in Cyberchase’s original season, Season 1. (1 column and 26 rows)
                >>>> SELECT "title" FROM "episodes" WHERE "season" = 1;

CYBERCHASE      2. list the season number of, and title of, the first episode of every season. (2 columns and 14 rows)
                >>>> SELECT "season", "title" FROM "episodes" WHERE "episode_in_season" = 1;

CYBERCHASE      3. find the production code for the episode “Hackerized!”. (1 column and 1 row)
                >>>> SELECT "production_code" FROM "episodes" WHERE "title" = 'Hackerized!';

CYBERCHASE      4. write a query to find the titles of episodes that do not yet have a listed topic. (1 column and 26 rows)
                >>>> SELECT "title" FROM "episodes" WHERE "topic" IS NULL;

CYBERCHASE      5. find the title of the holiday episode that aired on December 31st, 2004. (1 column and 1 row)
                >>>> SELECT "title" FROM "episodes" WHERE "air_date" IS '2004-12-31';

CYBERCHASE      6. list the titles of episodes from season 6 (2008) that were released early, in 2007. (1 column and 2 rows)
                >>>> SELECT "title" FROM "episodes" WHERE ("season" = 6 AND "air_date" LIKE '2007%');

CYBERCHASE      7. write a SQL query to list the titles and topics of all episodes teaching "fractions". (2 columns and 6 rows)
                >>>> SELECT "title", "topic" FROM "episodes" WHERE topic LIKE '%Fractions%';

CYBERCHASE      8. write a query that counts the number of episodes released in the last 5 years, from 2018 to 2023, inclusive. (1 column and 1 row | ****)
                >>>> SELECT COUNT (*) FROM (SELECT "air_date" FROM "episodes" WHERE "air_date" BETWEEN '2018-01-01' AND '2023-31-12'); ---> CAN USES DATA NOT EXIST INSIDE DATABASE TO DO CONDITION. IN THIS CASE, 2018-01-01 & 2023-31-12 NOT EXIST INSIDE DATABASE

CYBERCHASE      9. write a query that counts the number of episodes released in Cyberchase’s first 5 years, from 2002 to 2007, inclusive. (1 column and 1 row | ****)
                >>>> SELECT COUNT (*) FROM(SELECT "air_date" FROM "episodes" WHERE "air_date" BETWEEN '2002-01-21' AND '2007-12-12');

CYBERCHASE      10. write a SQL query to list the ids, titles, and production codes of all episodes. Order the results by production code, from earliest to latest. (3 columns and 140 rows)
                >>>> SELECT "id", "title", "production_code" FROM "episodes" ORDER BY "production_code";

CYBERCHASE      11. list the titles of episodes from season 5, in reverse alphabetical order. (1 column and 10 rows)
                >>>> SELECT "title" FROM "episodes" WHERE "season" = 5 ORDER BY "title" DESC;

CYBERCHASE      12. count the number of unique episode titles. (1 column and 1 row & sum is 136 | ???0)
                >>>> SELECT COUNT(DISTINCT(title)) FROM episodes e;

CYBERCHASE      13. GET ALL DATA OF SEASON 4 & ONLY HAVE 4 EPISODE. (DEPEN BY ME)
                >>>> SELECT * FROM "episodes" WHERE ("season" = 4 AND "episode_in_season" = 4);




VIEWS   https://cs50.harvard.edu/sql/2023/psets/0/views/
        check50 cs50/problems/2023/sql/views
        submit50 cs50/problems/2023/sql/views

VIEWS   1. write a SQL query that a translator might take interest in: list, "side by side", the "Japanese title" and the "English title" for each print. Ensure the "Japanese title is the first column, followed by the English title". (2 columns and 72 rows)
        >>>> SELECT japanese_title, english_title FROM views;

VIEWS   2. write a SQL query to list the average colors of prints by Hokusai that include “river” in the English title. (As an aside, do they have any hint of blue?) (1 column and 3 rows)
        >>>> SELECT average_color  FROM views WHERE (artist = 'Hokusai' AND english_title LIKE '%river%');

VIEWS   3. write a SQL query to count how many prints by Hokusai include “Fuji” in the English title. Though all of Hokusai’s prints focused on Mt. Fuji, in how many did “Fuji” make it into the title? (1 column and 1 row)
        >>>> SELECT COUNT(*) FROM (SELECT artist FROM views WHERE (artist = 'Hokusai' AND english_title LIKE '%Fuji%'));

VIEWS   4. write a SQL query to count how many prints by Hiroshige have English titles that refer to the “Eastern Capital”. Hiroshige’s prints were created in Japan’s “Edo period,” referencing the eastern capital city of Edo, now Tokyo. (1 column and 1 row)
        >>>> SELECT COUNT(*) FROM (SELECT artist FROM views WHERE (artist = 'Hiroshige' AND english_title LIKE '%Eastern Capital%'));

VIEWS   5. write a SQL query to find the highest contrast value of prints by Hokusai. Name the column “Maximum Contrast”. Does Hokusai’s prints most contrasting print actually have much contrast? (1 column and 1 row | 0.65)
        >>>> SELECT MAX(contrast) AS 'Maximum Contrast' FROM views WHERE artist = 'Hokusai';

VIEWS   6. write a SQL query to find the average entropy of prints by Hiroshige, rounded to two decimal places. Call the resulting column “Hiroshige Average Entropy”. (1 column and 1 row)
        >>>> SELECT ROUND((SELECT AVG(entropy) FROM views WHERE artist = 'Hiroshige'), 2);

VIEWS   7. write a SQL query to list the English titles of the 5 brightest prints by Hiroshige, from most to least bright. Compare them to this list on Wikipedia to see if your results match the print’s aesthetics. (1 column and 5 rows)
        >>>> SELECT english_title FROM views WHERE artist = 'Hiroshige' ORDER BY brightness DESC LIMIT 5;

VIEWS   8. write a SQL query to list the English titles of the 5 prints with the least contrast by Hokusai, from least to highest contrast. Compare them to this list on Wikipedia to see if your results match the print’s aesthetics. (1 column and 5 rows)
        >>>> SELECT english_title FROM views WHERE artist = 'Hokusai' ORDER BY contrast ASC LIMIT 5;

VIEWS   9. write a SQL query to find the English title and artist of the print with the highest brightness. (2 columns and 1 row)
        >>>> SELECT english_title, artist FROM views WHERE brightness = (SELECT MAX(brightness) FROM views);

VIEWS   10. write a SQL query to answer a question of your choice about the prints. The query should: (DEPEN BY ME)
                - Make use of AS to rename a column
                - Involve at least one condition, using WHERE
                - Sort by at least one column, using ORDER BY
        >>>> SELECT average_color AS 'vnn1489' FROM views ORDER BY average_color DESC;


NORMALS https://cs50.harvard.edu/sql/2023/psets/0/normals/
        check50 cs50/problems/2023/sql/normals
        submit50 cs50/problems/2023/sql/normals

NORMALS 1. write a SQL query to find the normal ocean surface temperature in the Gulf of Maine, off the coast of Massachusetts. To find this temperature, look at the data associated with 42.5° of latitude and -69.5° of longitude.
                - Recall that you can find the normal ocean surface temperature in the 0m column, which stands for 0 meters of depth!
        >>>> 

NORMALS 2. write a SQL query to find the normal temperature of the deepest sensor near the Gulf of Maine, at the same coordinate above.
                - The deepest sensor records temperatures at 225 meters of depth, so you can find this data in the 225m column.
        >>>> 

NORMALS 3. choose a location of your own and write a SQL query to find the normal temperature at 0 meters, 100 meters, and 200 meters. You might find Google Earth helpful if you’d like to find some coordinates to use!
        >>>> 

NORMALS 4. write a SQL query to find the lowest normal ocean surface temperature.
        >>>> 

NORMALS 5. write a SQL query to find the highest normal ocean surface temperature.
        >>>> 

NORMALS 6. write a SQL query to return all normal ocean temperatures at 50m of depth, as well as their respective degrees of latitude and longitude, within the Arabian Sea. Include latitude, longitude, and temperature columns. For simplicity, assume the Arabian Sea is encased in the following four coordinates:
                - 20° of latitude, 55° of longitude
                - 20° of latitude, 75° of longitude
                - 0° of latitude, 55° degrees of longitude
                - 0° of latitude, 75° degrees of longitude
        >>>> 

NORMALS 7. write a SQL query to find the average ocean surface temperature, rounded to two decimal places, along the equator. Call the resulting column “Average Equator Ocean Surface Temperature”.
                - The equator’s ocean surface temperatures can be found at all longitudes between the latitudes -0.5° and 0.5°, inclusive.
        >>>> 

NORMALS 8. write a SQL query to find the 10 locations with the lowest normal ocean surface temperature, sorted coldest to warmest. If two locations have the same normal ocean surface temperature, sort by latitude, smallest to largest. Include latitude, longitude, and surface temperature columns.
        >>>> 

NORMALS 9. write a SQL query to find the 10 locations with the highest normal ocean surface temperature, sorted warmest to coldest. If two locations have the same normal ocean surface temperature, sort by latitude, smallest to largest. Include latitude, longitude, and surface temperature columns.
        >>>> 

NORMALS 10. There are 180 whole degrees of latitude. Write a SQL query to determine how many points of latitude we have at least one data point for. (Why might we not have data points for all latitudes?)
        >>>> 




PLAYERS https://cs50.harvard.edu/sql/2023/psets/0/players/
        check50 cs50/problems/2023/sql/players
        submit50 cs50/problems/2023/sql/players

PLAYERS 1. write a SQL query to find the hometown (including city, state, and country) of Jackie Robinson. (3 columns and 1 row)
        >>>> SELECT "birth_city", "birth_state", "birth_country" FROM "players" WHERE ("last_name" = 'Robinson' AND "first_name" = 'Jackie');
        
PLAYERS 2. write a SQL query to find the side (e.g., right or left) Babe Ruth hit. (1 column and 1 row | ???0)
        >>>> SELECT "bats" FROM "players" WHERE ("last_name" = 'Ruth' AND "first_name" = 'Babe');

PLAYERS 3. write a SQL query to find the ids of rows for which a value in the column debut is missing. (1 column and 213 rows)
        >>>> SELECT "id" FROM "players" WHERE "debut" IS NULL;

PLAYERS 4. write a SQL query to find the first and last names of players who were not born in the United States. Sort the results alphabetically by first name, then by last name. (2 columns and 2814 rows)
        >>>> SELECT "first_name", "last_name" FROM "players" WHERE ("birth_country" IS NOT 'USA' AND "birth_country" IS NOT NULL) ORDER BY "first_name", "last_name";

PLAYERS 5. write a SQL query to return the first and last names of all right-handed batters. Sort the results alphabetically by first name, then by last name. (2 columns and 12878 row)
        >>>> SELECT first_name, last_name FROM players WHERE (bats IS 'R') ORDER BY first_name, last_name;

PLAYERS 6. write a SQL query to return the first name, last name, and debut date of players born in Pittsburgh, Pennsylvania (PA). Sort the results first by debut date—from most recent to oldest—then alphabetically by first name, followed by last name. (3 columns and 134 rows)
        >>>> SELECT "first_name", "last_name", "debut" FROM "players" WHERE ("birth_city" IS 'Pittsburgh' AND "birth_state" IS 'PA') ORDER BY "debut" DESC;

PLAYERS 7. write a SQL query to count the number of players who bat (or batted) right-handed and throw (or threw) left-handed, or vice versa. (1 columns and 1 row)
        >>>> SELECT COUNT(*) FROM players WHERE (bats = 'R' AND throws = 'L') OR (bats = 'L' AND throws = 'R');

PLAYERS 8. write a SQL query to find the average height and weight, rounded to two decimal places, of baseball players who debuted on or after January 1st, 2000. Return the columns with the name “Average Height” and “Average Weight”, respectively. (2 columns and 1 row)
        >>>> SELECT ROUND(AVG("height"), 2) AS "Average Height", ROUND(AVG(weight), 2) AS "Average Weight" FROM "players" WHERE "debut" >= '2000-01-01';

PLAYERS 9. write a SQL query to find the players who played their final game in the MLB in 2022. Sort the results alphabetically by first name, then by last name. (2 columns and 516 rows | ???0)
        >>>> SELECT "first_name", "last_name" FROM "players" WHERE "final_game" BETWEEN '2022-01-01' AND '2022-12-31' ORDER BY "first_name", "last_name";

PLAYERS 10. write SQL query to answer a question of your choice. This query should: (DEPEN BY ME)
                - Make use of AS to rename a column
                - Involve at least condition, using WHERE
                - Sort by at least one column using ORDER BY
        >>>> SELECT "first_name" AS "vnn1489" FROM "players" WHERE "birth_year" IS 1998 ORDER BY "first_name" ASC;